@use './animation';
@use './color';
@use './layout';
@use './state';
@use './typography';
@use 'sass:selector';

$header-height: 4rem !default;

.nav {
  // Display
  display: flex;

  @include layout.mobile {
    min-width: 4rem;
  }

  // Box
  align-items: flex-end;
}

.nav-button {
  // Layout
  align-self: center;

  // Display
  display: none;
  height: 4rem;
  width: 4rem;

  @include layout.mobile {
    display: flex;
  }

  // Box
  margin-inline-end: 0.5rem;
  border: none;
  padding: 0;
  align-items: center;
  justify-content: center;

  // Decoration
  @include color.theme-color(color.$icon-key) using ($color) {
    @include state.color-with-hover($color, $internal-outline: true);
  }
  background: none;

  &:focus {
    pointer-events: none;
  }
}

.nav-links {
  // Display
  display: flex;
  max-width: unset;

  // Box
  margin-block: 0;
  padding-inline: 0.5rem 1rem;
  flex-flow: wrap;

  // Decoration
  list-style: none;

  @include layout.mobile {
    // Layout
    position: fixed;
    inset: 0;

    // Display
    overflow: auto;
    overscroll-behavior: contain;
    transform: translateX(100%);

    .nav:focus-within & {
      transform: none;
    }

    // Box
    margin-block-start: calc($header-height + 1px);
    padding-block: 0 1rem;
    padding-inline: 0;
    flex-flow: column;

    // Decoration
    @include color.theme-background;
    transition: animation.transition(transform);
  }

  > li {
    @include layout.desktop {
      // Display
      display: flex;

      // Box
      align-items: center;
      margin-inline-end: -1px; // Hide duplicate borders when not wrapping.

      // Border on both sides to support wrapping.
      @include layout.border-inline(1, 1);
    }

    @include layout.mobile {
      @include layout.border-block(0, 1, $is-mobile: true);
    }
  }
}

.nav-link,
.nav-dropdown-icon {
  // Box
  border: none;
  border-radius: 2px;

  // Decoration
  @include state.link($internal-outline: true);
  @include typography.body;
  background: none;
}

$link-min-width: 7rem;

.nav-link {
  // Display
  display: flex;

  @include layout.desktop {
    li:not(.nav-group) > & {
      min-width: $link-min-width;
    }
  }

  // Box
  padding-block: 0.5rem;
  padding-inline: 1rem;
  justify-content: center;

  .nav-group .nav-dropdown & {
    justify-content: start;
  }

  @include layout.mobile {
    padding-inline: 2rem;

    justify-content: start;
  }

  // Decoration
  text-decoration: none;
  user-select: none;

  &:link:hover {
    text-decoration: underline;
  }

  > .nav-dropdown-icon {
    // Box
    padding: 0;
  }
}

.nav-dropdown-icon {
  // Display
  display: flex;
  height: 2rem;
  height: 1lh;
  width: 2rem;
  width: 1lh;

  @include layout.mobile {
    /* stylelint-disable-next-line selector-id-pattern */
    &:not(#\9) {
      display: none;
    }
  }

  // Box
  box-sizing: content-box;
  padding: 0.5rem;
  align-items: center;
  justify-content: center;
}

.nav-link.current {
  // Decoration
  @include typography.section-heading($set-color: false);
}

.nav-group {
  // Layout
  position: relative;

  @include layout.desktop {
    // Display
    min-width: $link-min-width + 1.5rem;

    > .nav-link {
      // Layout
      flex: auto;

      // Box
      padding-inline-end: 0;
    }
  }

  // Display
  min-width: 100%;

  ul {
    // Box
    margin: 0;
    padding: 0;

    // Decoration
    list-style: none;
  }

  li {
    // Box
    @include layout.border-block(1, 0);
  }

  @include layout.desktop {
    // stylelint-disable-next-line selector-class-pattern
    button:not(.\9) {
      // Decoration
      @include color.theme-color(color.$action-key) using ($color) {
        @include state.color-with-hover($color, $internal-outline: true);
      }
    }

    .nav-dropdown {
      // Position
      z-index: 1; // Ensure it renders over other nav links when wrapped.

      // Layout
      position: absolute;
      top: 100%;

      // Display
      opacity: 1;
      min-width: 100%;

      @at-root #{selector.unify(&, div)} {
        $shadow: 2rem;
        margin: 0 calc(-1 * $shadow);
        padding: 0 $shadow $shadow;
        width: calc(100% + 2 * $shadow);
        overflow: hidden;

        // Decoration
        > ul {
          @include layout.nav-dropdown-shadow;
        }
      }

      @at-root #{selector.unify(&, ul)},
        & > ul {
        // Box
        @include color.theme using ($theme) {
          border: layout.border(color.get($theme, color.$border-key));
          border-top: layout.border(color.get($theme, color.$background-key));
        }
        border-radius: 0 0 4px 4px;

        // Decoration
        @include color.theme-background;
        transition: animation.transition(opacity);
      }
    }

    ul ul .nav-link {
      // Box
      padding-inline-start: 2rem;
    }

    ul ul ul .nav-link {
      // Box
      padding-inline-start: 3rem;
    }

    &:not(:hover, :focus-within) {
      > .nav-dropdown {
        // Layout
        @include state.hidden;

        // Display
        opacity: 0;
      }
    }
  }

  @include layout.mobile {
    button {
      // Decoration
      pointer-events: none;
    }

    .nav-link {
      // Display
      width: 100%;
    }

    ul .nav-link {
      // Box
      padding-inline-start: 4rem;
    }

    ul ul .nav-link {
      // Box
      padding-inline-start: 6rem;
    }

    ul ul ul .nav-link {
      // Box
      padding-inline-start: 8rem;
    }

    li {
      // Decoration
      @include layout.border-block(1, 0, $is-mobile: true);
    }
  }
}
