@use 'animation';
@use 'color';
@use 'layout';
@use 'state';
@use 'typography';

.nav {
  display: flex;

  align-items: flex-end;

  @include layout.mobile {
    min-width: 4rem;
  }
}

.nav-button {
  align-self: center;

  display: none;
  height: 4rem;
  width: 4rem;

  margin-inline-end: 0.5rem;
  border: none;
  padding: 0;
  align-items: center;
  justify-content: center;

  @include color.theme-color(color.$icon-key) using ($color) {
    @include state.color-with-hover($color, $internal-outline: true);
  }
  background: none;

  @include layout.mobile {
    display: flex;
  }

  &:focus {
    pointer-events: none;
  }
}

.nav-links {
  display: flex;

  margin-block: 0;
  padding-inline: 0.5rem 1rem;

  list-style: none;

  @include layout.mobile {
    position: fixed;
    inset: 0;
    transform: translateX(100%);

    overflow: auto;

    margin-block-start: 4.5rem;
    padding-block: 0.5rem 1rem;
    padding-inline: 0;
    flex-flow: column;

    @include color.theme-background;
    transition: animation.transition(transform);

    .nav:focus-within & {
      transform: none;
    }
  }

  > li {
    @include layout.desktop {
      display: flex;
      align-items: center;
    }

    @include layout.border-inline(1, 0);

    &:last-of-type {
      @include layout.border-inline(1, 1);
    }

    @include layout.mobile {
      @include color.theme-color(color.$border-key) using ($color) {
        @include layout.border-block(1, 0, $gradient: layout.border-mobile-gradient($color));

        &:last-of-type {
          @include layout.border-block(1, 1, $gradient: layout.border-mobile-gradient($color));
        }
      }
    }
  }
}

.nav-link,
.nav-dropdown {
  border: none;
  border-radius: 2px;

  @include state.link($internal-outline: true);
  @include typography.body;
  background: none;
}

$link-min-width: 7rem;

.nav-link {
  display: flex;

  @include layout.desktop {
    min-width: $link-min-width;
  }

  padding-block: 0.5rem;
  padding-inline: 1rem;

  justify-content: center;
  text-decoration: none;

  &:link:hover {
    text-decoration: underline;
  }

  @include layout.mobile {
    padding-inline: 2rem;

    justify-content: start;
  }

  > .nav-dropdown {
    padding-block: 0;
  }
}

.nav-dropdown {
  // Display
  display: flex;
  height: 2rem;
  height: 1lh;
  width: 2rem;
  width: 1lh;

  // Box model
  box-sizing: content-box;
  padding: 0.5rem;
  padding-inline-start: 0;
  align-items: center;
  justify-content: center;

  @include layout.mobile {
    /* stylelint-disable-next-line selector-id-pattern */
    &:not(#\9) {
      display: none;
    }
  }
}

.nav-link.current {
  @include typography.section-heading($set-color: false);
}

.nav-group {
  position: relative;

  @include layout.desktop {
    > .nav-link {
      min-width: $link-min-width + 1.5rem;

      padding-inline-end: 0;
    }
  }

  ul {
    min-width: 100%;

    margin: 0;
    padding: 0;

    list-style: none;
  }

  li {
    @include layout.border-block(1, 0);
  }

  @include layout.desktop {
    button {
      // stylelint-disable-next-line selector-class-pattern
      &:not(.\9) {
        @include color.theme-color(color.$action-key) using ($color) {
          @include state.color-with-hover($color, $internal-outline: true);
        }
      }
    }

    ul {
      position: absolute;
      top: 100%;

      opacity: 1;

      @include color.theme using ($theme) {
        border: layout.border(color.get($theme, color.$border-key));
        border-top: layout.border(color.get($theme, color.$background-key));
      }
      border-radius: 0 0 4px 4px;

      @include color.theme-background;
      transition: animation.transition(opacity);
    }

    &:not(:hover, :focus-within) {
      ul {
        @include state.hidden;
        opacity: 0;
      }
    }
  }

  @include layout.mobile {
    button {
      pointer-events: none;
    }

    .nav-link {
      width: 100%;
    }

    ul .nav-link {
      padding-inline-start: 4rem;
    }

    li {
      @include color.theme-color(color.$border-key) using ($color) {
        @include layout.border-block(1, 0, $gradient: layout.border-mobile-gradient($color));
      }
    }
  }
}
